<!--#########################################################################-->
<!--                                                                         -->
<!-- Notes:                                                                  -->
<!-- * This file can be imported into libvirt with: virsh define <file>      -->
<!-- * Before importing, search/replace "$NAME" with your domain name.       -->
<!-- * Before importing, some cfg itmes will likely need to modified.        -->
<!-- * On import, the XML tags will be re-ordered and all comments removed.  -->
<!--                                                                         -->
<!--#########################################################################-->
<domain type='kvm'>
  <name>$NAME</name>
  <!--=======================================================================-->
  <!-- Platform Information                                                  -->
  <!-- * The <libosinfo:os> tag is determined with the osinfo-query utility. -->
  <!-- * After the initial boot/install, you will likely want to move the    -->
  <!--   <boot dev='cdrom'> tag below <boot dev='hd'>, or just remove it.    -->
  <!--=======================================================================-->
  <metadata>
    <libosinfo:libosinfo xmlns:libosinfo="http://libosinfo.org/xmlns/libvirt/domain/1.0">
      <libosinfo:os id="http://ubuntu.com/ubuntu/20.04"/>
    </libosinfo:libosinfo>
  </metadata>
  <os>
    <type arch='x86_64' machine='pc-q35-3.1'>hvm</type>
    <loader readonly='yes' type='pflash'>/usr/share/OVMF/OVMF_CODE.fd</loader>
    <nvram>/var/lib/libvirt/qemu/nvram/$NAME_VARS.fd</nvram>
    <boot dev='cdrom'/>
    <boot dev='hd'/>
  </os>
  <features>
    <acpi/>
    <apic/>
  </features>
  <clock offset='utc'>
    <timer name='rtc' tickpolicy='catchup'/>
    <timer name='pit' tickpolicy='delay'/>
    <timer name='hpet' present='no'/>
  </clock>
  <!--=======================================================================-->
  <!-- CPU and Memory                                                        -->
  <!--=======================================================================-->
  <vcpu placement='static'>4</vcpu>
  <cpu mode='host-model' check='partial'>
    <model fallback='allow'/>
    <topology sockets='1' cores='4' threads='1'/>
  </cpu>
  <memory unit='KiB'>8388608</memory>
  <currentMemory unit='KiB'>8388608</currentMemory>
  <!--=======================================================================-->
  <!-- Power Management                                                      -->
  <!--=======================================================================-->
  <pm>
    <suspend-to-mem enabled='no'/>
    <suspend-to-disk enabled='no'/>
  </pm>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>destroy</on_crash>
  <!--=======================================================================-->
  <!-- PCI Topology                                                          -->
  <!--=======================================================================-->
  <!-- Sl.Fn Description                                                     -->
  <!-- 00.00 Host Bridge - QEMU Hard-coded - Has 31 non-hotswap ports.       -->
  <!-- 01.xx Non-PCI Bus Controllers                                         -->
  <!--   .00 - XHCI USB Controller (no legacy USB companion controllers)     -->
  <!--   .01 - Virtio Serial Controller                                      -->
  <!--   .02 - VFIO Passthrough USB Controller (for native USB hotplug)      -->
  <!-- 02.xx Miscellaneous PCI Devices                                       -->
  <!--   .00 - Virtio Random Number Generator                                -->
  <!--   .01 - Virtio Memory Balloon                                         -->
  <!-- 03.00 Virtio Network Card                                             -->
  <!-- 04.00 Virtio Disk Drive                                               -->
  <!-- 05.00 Slot reserved for promoting Emulated GPU to primary/boot GPU.   -->
  <!-- 06.xx VFIO Passthrough GPU                                            -->
  <!--   .00 - Graphics function of the GPU                                  -->
  <!--   .01 - Audio    function of the GPU                                  -->
  <!-- 07:00 Emulated GPU (intentionally higher slot than VFIO GPU)          -->
  <!-- 08-30 Unused Slots                                                    -->
  <!-- 31.xx QEMU Hard-coded Devices                                         -->
  <!--   .00 - ISA Bridge                                                    -->
  <!--   .02 - Primary SATA Controller                                       -->
  <!--   .03 - SMBus                                                         -->
  <!--=======================================================================-->
  <devices>
    <emulator>/usr/bin/qemu-system-x86_64</emulator>
    <!--=====================================================================-->
    <!-- Non-PCI Bus Controllers                                             -->
    <!-- * The <address> tags follow the PCI topology scheme outlined above. -->
    <!--=====================================================================-->
    <controller type='usb' index='0' model='qemu-xhci'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x0' multifunction='on'/>
    </controller>
    <controller type='virtio-serial' index='0'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x1'/>
    </controller>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <source>
        <address domain='0x0000' bus='0x0a' slot='0x00' function='0x3' />
      </source>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x2'/>
    </hostdev>
    <!--=====================================================================-->
    <!-- Miscellaneous PCI Devices                                           -->
    <!-- * The <address> tags follow the PCI topology scheme outlined above. -->
    <!--=====================================================================-->
    <rng model='virtio'>
      <backend model='random'>/dev/urandom</backend>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0' multifunction='on'/>
    </rng>
    <memballoon model='virtio'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x1'/>
    </memballoon>
    <!--=====================================================================-->
    <!-- Virtio Network Card                                                 -->
    <!-- * A <mac> tag will be auto-generated and added on import.           -->
    <!-- * The <address> tag follows the PCI topology scheme outlined above. -->
    <!--=====================================================================-->
    <interface type='bridge'>
      <model type='virtio'/>
      <source bridge='br0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>
    </interface>
    <!--=====================================================================-->
    <!-- Disk Drives                                                         -->
    <!-- * vda => Guest OS Root/Boot disk => Host LVM LV vg0-desktop         -->
    <!-- * sda => Guest DVD-ROM Drive     => ISO image file on Host          -->
    <!-- * The vda disk is backed by an LVM logical volume on the Host and   -->
    <!--   is exposed inside the Guest (via virtio) as a PCI device.         -->
    <!-- * The <address> tag follows the PCI topology scheme outlined above. -->
    <!--   Note that vda is _not_ connected to a SATA controller.            -->
    <!-- * The DVD-ROM drive (sda) is backed by a read-only ISO file on the  -->
    <!--   host. It is connect to the primary SATA controller.               -->
    <!--=====================================================================-->
    <disk type='block' device='disk'>
      <driver name='qemu' type='raw' cache='none' io='native'/>
      <source dev='/dev/mapper/vg0-desktop'/>
      <target dev='vda' bus='virtio'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x0'/>
    </disk>
    <disk type='file' device='cdrom'>
      <driver name='qemu' type='raw'/>
      <source file='/mnt/data/images/iso/neon-user-20201224-0944.iso'/>
      <readonly/>
      <target dev='sda' bus='sata'/>
      <address type='drive' controller='0' bus='0' target='0' unit='0'/>
    </disk>
    <!--=====================================================================-->
    <!-- VFIO Passthrough GPU                                                -->
    <!-- * Provides direct/fast Guest access to a physical GPU on the Host.  -->
    <!-- * The card's GPU (0) and audio (1) functions are both passed thru.  -->
    <!-- * The real/physical Host-side PCI device addresses are specified    -->
    <!--   with the <source><address> tags and are obtained by running lspci.-->
    <!-- * The Guest-side PCI device addresses are specified with the outer  -->
    <!--   <address> tags and follow the PCI topology scheme outlined above. -->
    <!--=====================================================================-->
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <source>
        <address domain='0x0000' bus='0x09' slot='0x00' function='0x0'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x06' function='0x0' multifunction='on'/>
    </hostdev>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <source>
        <address domain='0x0000' bus='0x09' slot='0x00' function='0x1'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x06' function='0x1'/>
    </hostdev> 
    <!--=====================================================================-->
    <!-- Emulated GPU                                                        -->
    <!-- * For remote, low-performance graphical interaction with the guest. -->
    <!-- * The <video> tag exposes the GPU as a PCI device in the Guest. The -->
    <!--   <address> subtag follows the PCI topology scheme outlined above.  -->
    <!-- * The <graphics> tag specifies the remote connection method.        -->
    <!-- * This GPU is only useable when it is the primary/boot GPU, meaning -->
    <!--   it is either the only GPU or has the lowest PCI slot of all GPUs. -->
    <!-- * To promote this GPU to primary/boot, change its PCI slot from 7   -->
    <!--   to 5, giving it priority over the VFIO Passthrough GPU in slot 6. -->
    <!--=====================================================================-->
    <video>
      <model type='qxl' ram='65536' vram='65536' vgamem='16384' heads='1' primary='yes'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x07' function='0x0'/>
    </video>
    <graphics type='vnc' port='-1' autoport='yes' listen='0.0.0.0' sharePolicy='allow-exclusive'>
      <listen type='address' address='0.0.0.0'/>
    </graphics>
    <!--=====================================================================-->
    <!-- USB Devices                                                         -->
    <!-- * These devices are connected to the XHCI USB Controller above.     -->
    <!--=====================================================================-->
    <!-- Not used since a whole Host USB controller is passed through above. -->
    <!--=====================================================================-->
    <!-- Serial Console                                                      -->
    <!-- * For redirecting Guest grub/kernel boot output to a serial console.-->
    <!-- * This device is connected to the Virtio Serial Controller above.   -->
    <!--=====================================================================-->
    <console type='pty'>
      <target type='virtio' controller='0' bus='0' port='0'/>
    </console>
    <!--=====================================================================-->
    <!-- QEMU Guest Agent                                                    -->
    <!-- * For Host communication with the QEMU Guest Agent daemon running   -->
    <!--   inside the Guest. The agent must be manually installed.           -->
    <!-- * This device is connected to the Virtio Serial Controller above.   -->
    <!--=====================================================================-->
    <channel type='unix'>
      <address type='virtio-serial' controller='0' bus='0' port='1'/>
      <target type='virtio' name='org.qemu.guest_agent.0'/>
    </channel>
    <input type='mouse' bus='ps2'/>
    <input type='keyboard' bus='ps2'/>
  </devices>
</domain>
